import { uploadImageServer } from './storage'

/**
 * Claude Sonnet 4.5を使用して画像生成用のプロンプトを生成
 * @param title 記事タイトル
 * @param summary 記事サマリー（オプション）
 * @param body 記事本文（オプション）
 * @returns 生成されたプロンプト、またはエラー時はnull
 */
async function generateImagePromptWithClaude(
  title: string,
  summary?: string | null,
  body?: string | null
): Promise<string | null> {
  const apiKey = process.env.ANTHROPIC_API_KEY

  if (!apiKey) {
    console.warn('ANTHROPIC_API_KEY is not set, using fallback prompt')
    return null
  }

  try {
    console.log('🤖 Generating image prompt with Claude Sonnet 4.5...')
    const startTime = Date.now()

    // 記事内容を準備（本文は最初の1000文字のみ使用してコスト削減）
    const contentPreview = body ? body.substring(0, 1000) : ''

    const userMessage = `記事情報:
タイトル: ${title}
サマリー: ${summary || 'なし'}
本文（冒頭）: ${contentPreview || 'なし'}

この記事に最適なヘッダー画像を生成するための、詳細な英語プロンプトを作成してください。`

    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': apiKey,
        'anthropic-version': '2023-06-01',
      },
      body: JSON.stringify({
        model: 'claude-sonnet-4-20250514',
        max_tokens: 500,
        temperature: 0.7,
        system: `あなたは医療・テクノロジー分野のブログ記事に最適なヘッダー画像を生成するための、画像生成AIプロンプト作成の専門家です。

記事内容を深く分析し、以下を含む具体的で詳細な英語プロンプトを生成してください:

必須要素:
- 具体的なビジュアル要素（アイコン、シンボル、オブジェクト、構図）
- カラースキーム（医療=青/緑/白、テクノロジー=青/紫/黒など）
- スタイル（モダン、プロフェッショナル、抽象的、イラスト風など）
- ムード・雰囲気（革新的、信頼できる、未来的など）
- 技術的要件（21:9の横長アスペクト比、画像内にテキストなし）

重要な制約:
- 写真的ではなく、抽象的またはイラストレーション的なスタイル
- 日本の医療・テクノロジー文脈を理解した上で、グローバルに通用するデザイン
- プロフェッショナルで清潔感のあるデザイン

出力形式:
- 英語のプロンプトのみを出力（説明や前置きは不要）
- 1つの段落として簡潔に記述`,
        messages: [
          {
            role: 'user',
            content: userMessage,
          },
        ],
      }),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Claude API error:', errorText)
      return null
    }

    const data = await response.json()
    const generatedPrompt = data.content?.[0]?.text

    if (!generatedPrompt) {
      console.error('No prompt generated by Claude')
      return null
    }

    const elapsed = Date.now() - startTime
    console.log(`✅ Claude prompt generated in ${elapsed}ms`)
    console.log(`📝 Generated prompt: ${generatedPrompt.substring(0, 200)}...`)

    return generatedPrompt
  } catch (error) {
    console.error('Claude prompt generation failed:', error)
    return null
  }
}

/**
 * Gemini 2.5 Flash Image APIを使用してヘッダー画像を生成（2段階フロー）
 * @param title 記事タイトル
 * @param summary 記事サマリー（オプション）
 * @param body 記事本文（オプション）
 * @returns 生成された画像の公開URL、またはエラー時はnull
 */
export async function generateHeaderImage(
  title: string,
  summary?: string | null,
  body?: string | null
): Promise<string | null> {
  const geminiApiKey = process.env.GOOGLE_AI_API_KEY

  if (!geminiApiKey) {
    console.error('GOOGLE_AI_API_KEY is not set')
    return null
  }

  try {
    console.log('🎨 Starting 2-stage image generation...')
    const totalStartTime = Date.now()

    // Stage 1: Claude でプロンプト生成
    let imagePrompt = await generateImagePromptWithClaude(title, summary, body)

    // フォールバック: Claude が失敗した場合はテンプレートプロンプトを使用
    if (!imagePrompt) {
      console.warn('⚠️ Claude prompt generation failed, using fallback template')
      imagePrompt = createFallbackPrompt(title, summary)
    }

    // Stage 2: Gemini で画像生成
    console.log('🖼️ Generating image with Gemini 2.5 Flash Image...')
    const geminiStartTime = Date.now()

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image:generateContent?key=${geminiApiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: imagePrompt,
                },
              ],
            },
          ],
          generationConfig: {
            temperature: 1,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 8192,
            imageConfig: {
              aspectRatio: "21:9"
            }
          },
        }),
      }
    )

    if (!response.ok) {
      const errorText = await response.text()
      console.error('❌ Gemini API error (HTTP', response.status, '):', errorText)
      return null
    }

    const data = await response.json()

    // 画像データを取得（base64エンコードされている）
    // Gemini may return text + image, so search through all parts
    const parts = data.candidates?.[0]?.content?.parts || []
    const imageData = parts.find((part: any) => part.inlineData)?.inlineData

    if (!imageData || !imageData.data) {
      console.error('❌ No image data in Gemini response')
      console.error('Response structure:', JSON.stringify(data, null, 2))
      return null
    }

    const geminiElapsed = Date.now() - geminiStartTime
    console.log(`✅ Gemini image generated in ${geminiElapsed}ms`)

    // Base64デコードしてBufferに変換
    const imageBuffer = Buffer.from(imageData.data, 'base64')

    // Supabase Storageにアップロード
    console.log('☁️ Uploading to Supabase Storage...')
    const fileName = `generated-${Date.now()}.jpg`
    const publicUrl = await uploadImageServer(
      imageBuffer,
      fileName,
      'image/jpeg',
      'post-images'
    )

    const totalElapsed = Date.now() - totalStartTime
    console.log(`🎉 Image generation completed in ${totalElapsed}ms`)
    console.log(`🔗 Image URL: ${publicUrl}`)

    return publicUrl
  } catch (error) {
    console.error('Image generation failed:', error)
    return null
  }
}

/**
 * フォールバック用のシンプルなプロンプト生成
 * Claude が失敗した場合に使用
 */
function createFallbackPrompt(title: string, summary?: string | null): string {
  return `Create a professional, modern header image for a blog post about: "${title}".
${summary ? `Context: ${summary}` : ''}

Style requirements:
- Professional and clean design
- Modern tech/medical theme
- High quality, visually appealing
- 21:9 ultra-wide aspect ratio (approximately 2.33:1) - very important!
- Horizontal composition optimized for wide screens
- Abstract or illustrative style
- No text in the image

The image should convey innovation, technology, and professionalism in a wide panoramic format.`
}
